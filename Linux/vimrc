"F2： 自动填充头文件
"F3：设置c/c++格式对齐
"F6：全选
"F7：添加行注释
"F8：撤销行注释
"F9：编译和运行
syntax on
set number
set shiftwidth=4
"set makeprg=CompileRunCpp()
language messages zh_CN.utf-8   
set completeopt=longest,menu    
set fileencodings=utf-8,gb18030,ucs-bom,gbk,gb2312,cp936   
"set expandtab
map <F9> :call CompileRunCpp()<CR>
map <F6> <esc>ggVG " +y 
map <F3> <esc>gg=G " format C/C++
func! CompileRunCpp()
se"w"
if &filetype == 'c'
     exec "!gcc % -o %< -lpthread "
	 exec "! ./%<"
elseif &filetype == 'cpp'
	 exec "!g++ % -o %<"
     exec "!time ./%<"    
elseif &filetype == 'java' 
	 exec "!javac %" 
	 exec "!time java %<"
elseif &filetype == 'sh'
	 exec "!/bin/bash %"
elseif &filetype == 'python'|| &filetype == 'py'
	exec "!time python %"
elseif &filetype == 'html'
    exec "!google-chrome %&"
elseif &filetype == 'go'
	exec "!time go run %"
endif
endfunc

map<F8> :call Cancelnote()<CR>
func Cancelnote()
if &filetype == 'c' || &filetype == 'cpp' || &filetype == 'java'
	exec "s/\\/\\///g"
elseif &filetype == 'python'|| &filetype == 'sh' 
	exec "s/#//g"
endif
endfunc
map<F7> :call AddNote()<CR>
func AddNote()
if &filetype == 'c' || &filetype == 'cpp' || &filetype == 'java'
	exec "s/^/\\/\\//g"
elseif &filetype == 'python'|| &filetype == 'sh' 
	exec "s/^/#/g "
endif
endfunc
map<C-e> :! /bin/bash<CR>
set autoindent
set cindent  
set tabstop=4 
set smartindent
set showmatch
set nobackup
set noswapfile
set autowrite
colorscheme  fruity "koehler elflord default darkblue ron evening freya
:inoremap ( ()<ESC>i
		:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {<CR>}<ESC>O
	:inoremap } <c-r>=ClosePair('}')<CR>
	:inoremap [ []<ESC>i
	:inoremap ] <c-r>=ClosePair(']')<CR>
	function! ClosePair(char)
	    if getline('.')[col('.') - 1] == a:char
	            return "\<Right>"
		        else
			        return a:char
				    endif
				    endfunction
map<f2> :call Settitle()<cr>
func Settitle()
if &filetype == 'c'
    let l = 0
    let l = l + 1 | call setline(l,'#include <sys/types.h>')
    let l = l + 1 | call setline(l,'#include <sys/stat.h>')
    let l = l + 1 | call setline(l,'#include <sys/socket.h>')
    let l = l + 1 | call setline(l,'#include <unistd.h>')
    let l = l + 1 | call setline(l,'#include <stdio.h>')
    let l = l + 1 | call setline(l,'#include <stdarg.h>')
    let l = l + 1 | call setline(l,'#include <string.h>')
    let l = l + 1 | call setline(l,'#include <fcntl.h>')
    let l = l + 1 | call setline(l,'#include <math.h>')
    let l = l + 1 | call setline(l,'#include <stdlib.h>')
    let l = l + 1 | call setline(l,'#include <netinet/in.h>')
    let l = l + 1 | call setline(l,'#include <arpa/inet.h>')
    let l = l + 1 | call setline(l,'#define  MAXLINE 1000')
    let l = l + 1 | call setline(l,'#define  SA struct sockaddr')
    let l = l + 1 | call setline(l,'')
    let l = l + 1 | call setline(l,'int main()')
    let l = l + 1 | call setline(l,'{')
    let l = l + 1 | call setline(l,'    ')
    let l = l + 1 | call setline(l,'    return 0;')
    let l = l + 1 | call setline(l,'}')
elseif &filetype == 'sh'
    let l = 0
    let l = l + 1 | call setline(l,'#!/bin/bash')
elseif &filetype == 'cpp'
    let l = 0
    let l = l + 1 | call setline(l,'#include <iostream>')
    let l = l + 1 | call setline(l,'#include <numeric>')
    let l = l + 1 | call setline(l,'#include <cstdio>')
    let l = l + 1 | call setline(l,'#include <cstdlib>')
    let l = l + 1 | call setline(l,'#include <cstring>')
    let l = l + 1 | call setline(l,'#include <vector>')
    let l = l + 1 | call setline(l,'#include <cmath>')
    let l = l + 1 | call setline(l,'#define INF 0x3f3f3f3f')
    let l = l + 1 | call setline(l,'#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();e++)')
    let l = l + 1 | call setline(l,'typedef long long ll;')
    let l = l + 1 | call setline(l,'using namespace std;')
    let l = l + 1 | call setline(l,'const int N = 100100;')
    let l = l + 1 | call setline(l,'int main()')
    let l = l + 1 | call setline(l,'{')
    let l = l + 1 | call setline(l,'    freopen("in.txt","r",stdin);')
    let l = l + 1 | call setline(l,'    ')
    let l = l + 1 | call setline(l,'    return 0;')
    let l = l + 1 | call setline(l,'}')
endif
endfunc
