#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <iostream>
#define INF 0x3f3f3f3f
#define rep(i,n) for(int i = 0;i <n ;i ++)
#define fi first
#define se second
#define INF 0x3f3f3f3f
const int N = 102000;
using namespace std;
typedef pair<int,int> pii;
int num[N],tmp[N];
void insert(int n)
{
	int tmp = num[n-1];
	int i = n - 2;
	for(;i >= 0 && tmp < num[i];i --)
		num[i + 1] = num[i];
	num[i + 1] = tmp;
}
void Rinsert(int n)
{
	if(n > 0)
	{
		Rinsert(n-1);
		insert(n);
	}
}
void Mergesort(int l,int r)
{
	if(l == r)return;
	int mid = (l + r) >> 1,id = l;
	Mergesort(l,mid);
	Mergesort(mid + 1,r);
	int a = l,b = mid + 1;
	while(a <= mid &&  b <= r)
	{
		if(num[a] < num[b])tmp[id++] = num[a++];
		else tmp[id ++] = num[b ++];
	}
	while(a <= mid)tmp[id++] = num[a++];
	while(b <= r)tmp[id++] = num[b ++];
	for(int i = l;i <= r;i ++)num[i] = tmp[i];
}
int partition(int x,int l,int r)
{
	int tmp = num[l];
	int a,b;
	for(a = l,b = r;a < b;)
	{
		while(a < b && num[b] >= x )b--;
		if(a < b)num[a++] = num[b];

		while(a < b && num[a] <= x)a ++;
		if(a < b)num[b--] = num[a];
	}
	num[a] = tmp;
	return a;
}
void Qsort(int l,int r)
{
	if(l < r)
	{
		int mid = partition(num[l],l,r);
		Qsort(l,mid - 1);
		Qsort(mid + 1,r);		
	}
}
void input(int n)
{
	rep(i,n)scanf("%d",num + i);
}
void output(int n)
{
	rep(i,n)printf("%d ",num[i]);puts("");
}
int main()
{
	freopen("in.txt","r",stdin);
	int n;
	srand(333);
	while(~scanf("%d",&n))
	{
		input(n);	Rinsert(n);
		printf("Insert sort: ");output(n);

		input(n);Mergesort(0,n-1);
		printf("Natural merge sort: ");output(n);

		input(n);Qsort(0,n-1);
		printf("Quick sort: ");output(n);
	}
	return 0;
}
	
